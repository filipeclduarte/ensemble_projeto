# teste python
import pandas as pd
import matplotlib.pyplot as plt
def main():
df = pd.read_csv('/mnt/sdb1/discohd/documentos/tutorial_julia_python_r/data/sp500.csv')
print(df.head())
df['close'].plot()
plt.show()
if __name__ == '__main__':
main()
# teste python
import pandas as pd
import matplotlib.pyplot as plt
def main():
df = pd.read_csv('/mnt/sdb1/discohd/documentos/tutorial_julia_python_r/data/sp500.csv')
print(df.head())
df['close'].plot()
plt.show()
if __name__ == '__main__':
main()
library(purrr)
map_dbl(list(rnorm(10), runif(10), rpois(10)), mean)
map_dbl(list(rnorm(10), runif(10), rpois(10)), mean(.))
map_dbl(list(rnorm(10), runif(10), rpois(10)), mean())
map_dbl(data.frame(rnorm(10), runif(10), rpois(10)), mean())
map_dbl(data.frame(rnorm(10), runif(10), rpois(10)), mean
)
map_dbl(data.frame(rnorm(10), runif(10), rpois(10)), mean
)
# fazendo a leitura do script estatisticas.R
source("estatisticas.R")
# demonstrativos
dfp_id <- c("BPP", "BPA", "DRE")
dfps_id <- toupper(dfps_id) # transformar em Upper case
_con
dfp_con <- function(dfps_id, ano_inicial, ano_final){
dfps_id <- toupper(dfps_id) # transformar em Upper case
anos <- ano_inicial:ano_final
urls <- paste0("http://dados.cvm.gov.br/dados/CIA_ABERTA/DOC/DFP/DADOS/dfp_cia_aberta_", anos, ".zip")
destino <- paste0("dfp_cia_aberta_", anos, ".zip")
funcao_download <- function(u, d){
download.file(u, d)}
mapply(funcao_download, urls, destino) # Fazer download e associar cada url a cada destino
# fazer a leitura dos dados
# o vetor anos será atualizado conforme a quantidade de demonstrativos desejados
anos <- rep(ano_inicial:ano_final, each=length(dfps_id))
arquivos_nomes <- paste0("dfp_cia_aberta_", dfps_id, "_con_", anos, ".csv")
# Funcao processo de leitura
funcao_leitura_zip <- function(dest, arq){
read.csv2(unz(dest, arq), encoding = "latin1")}
destino <- rep(destino, each=length(dfps_id))
dados <<- mapply(funcao_leitura_zip, destino, arquivos_nomes)
}
# Chamar a função que já faz o processo de download
dfp_con(dfps_id = c("bpp", "bpa", "dre"), ano_inicial = 2017, ano_final = 2019)
library(dplyr)
library(magrittr)
df <- bind_rows(dados)
View(df)
# remover dados do ambiente para liberar memória
rm(dados)
str(df)
# selecionar as contas de interesse
contas <- c("Ativo Total", "Ativo Circulante", "Passivo Circulante", "Receita de Venda de Bens e/ou Serviços")
# as datas de interessse
datas <- as.Date(c("2017-12-31",
"2018-12-31",
"2019-12-31"))
# criar o data frame com os meses de dezembro
df_ultimo <- df %>%
mutate(DT_FIM_EXERC = as.Date(DT_FIM_EXERC),
CD_CVM = as.character(CD_CVM),
VL_CONTA = as.numeric(VL_CONTA)) %>%
filter(DT_FIM_EXERC %in% datas,
ORDEM_EXERC == "ÚLTIMO",
DS_CONTA %in% contas) %>%
select(DT_FIM_EXERC, DENOM_CIA, CD_CVM, DS_CONTA, VL_CONTA)
View(df_ultimo)
# Estrutura
df_ultimo %>%
str()
library(tidyr)
# verificar se há linhas repetidas
df_ultimo %>%
distinct()
# pivot_wider
df_wide <- df_ultimo %>%
distinct() %>%
pivot_wider(names_from = DS_CONTA,
values_from = VL_CONTA)
View(df_wide)
summary(df_wide)
df_wide %>%
select(DENOM_CIA) %>%
unique()
sum(is.na(df_wide))
df_wide %>%
filter_all(any_vars(is.na(.)))
df_wide <- df_wide %>%
na.omit()
# Média do Ativo Total
mean(df_wide$`Ativo Total`)
# Média da Receita
mean(df_wide$`Receita de Venda de Bens e/ou Serviços`)
# verificar se há linhas repetidas
df_ultimo %>%
distinct()
# pivot_wider
df_wide <- df_ultimo %>%
distinct() %>%
pivot_wider(names_from = DS_CONTA,
values_from = VL_CONTA)
View(df_wide)
summary(df_wide)
df_wide$`Passivo Circulante`
str(df_wide)
View(df_wide)
df_wide
df_ultimo
View(df_ultimo)
# verificar se há linhas repetidas
df_ultimo %>%
distinct()
# verificar se há linhas repetidas
df_ultimo %>%
distinct() %>%
count()
df_ultimo %>%
count()
# pivot_wider
df_wide <- df_ultimo %>%
distinct() %>%
pivot_wider(names_from = DS_CONTA,
values_from = VL_CONTA)
# pivot_wider
df_wide <- df_ultimo %>%
distinct() %>%
pivot_wider(names_from = DS_CONTA,
values_from = VL_CONTA) %>%
unnest()
View(df_wide)
df_wide
summary(df_wide)
df_wide %>%
select(DENOM_CIA) %>%
unique()
sum(is.na(df_wide))
df_wide %>%
filter_all(any_vars(is.na(.)))
df_wide <- df_wide %>%
na.omit()
# Média do Ativo Total
mean(df_wide$`Ativo Total`)
# ou
df_wide$`Passivo Circulante` %>%
mean()
# Média da Receita
mean(df_wide$`Receita de Venda de Bens e/ou Serviços`)
# Média do Ativo Total
mean(df_wide$`Ativo Total`)
# ou
df_wide$`Passivo Circulante` %>%
mean()
# Média da Receita
mean(df_wide$`Receita de Venda de Bens e/ou Serviços`)
# Variância do Ativo Total
var(df_wide$`Ativo Total`)
# Variância da Receita
var(df_wide$`Receita de Venda de Bens e/ou Serviços`)
# desvio padrão dos ativos totais
sd(df_wide$`Ativo Total`)
# Mostre a variável e o seu nome
sd_quant <- df_wide %>%
group_by(DT_FIM_EXERC) %>%
summarise_if(is.numeric, sd) %>%
select(-DT_FIM_EXERC)
colnames(sd_quant)[apply(sd_quant, 1, which.max)]
sd_quant$`Ativo Total`
# apenas um quantil 0.25 (o ponto onde acumula-se 25% dos dados)
quantile(df_wide$`Passivo Circulante`, probs = 0.25)
# mais de um quantil. 0.1, 0.5 (mediana) e 0.9
quantile(df_wide$`Ativo Total`, probs = c(0.1, 0.5, 0.9))
estatisticas <- function(x){
x <- x[!is.na(x)] # isso serve para que ele omita as observações com NA
me <- mean(x)
med <- median(x)
n <- length(x)
s <- sd(x)
mi <- min(x)
ma <- max(x)
q25 <- quantile(x, probs = 0.25)
q75 <- quantile(x, probs = 0.75)
return(c(n = n, media = me, mediana = med, desvio = s,
Q = q25, Q = q75, min = mi, max = ma))
}
estatisticas(df_wide$`Ativo Circulante`)
#Posso fazer com a função sapply. Nesse caso preciso selecionar as variáveis quantitativas
## apply aplica uma função em uma margem  de um data frame.
# REtorna uma matrix. Podemos transformar em data frame
df_wide %>%
select_if(is.numeric) %>%
apply(MARGIN = 2, FUN = estatisticas) %>%
as.data.frame()
# criar um vetor com os nomes das variáveis quantitativas
vars_quant <- df_wide %>%
select_if(is.numeric) %>%
colnames()
# Vamos criar uma função que faz o cálculo das estatísticas por colunas
destats <- function(x){
apply(x, 2, estatisticas)
}
### vamos usar a função by(df[, quant_vars], var_grupo, funcao) para calcular estatisticas() por grupos
estatisticas_ano <- by(df_wide[,vars_quant], df_wide$DT_FIM_EXERC, destats)
estatisticas
# Correlação entre Ativo Total e Ativo Circulante
cor(df_wide$`Ativo Total`, df_wide$`Ativo Circulante`)
# Matriz de correlação
m_cor <- df_wide %>%
select_if(is.numeric) %>%
cor()
# Ë possível transformar em data frame utilizando a função as.data.frame
m_cor %>%
as.data.frame()
# demonstrativos
dfp_id <- c("BPP", "BPA", "DRE")
# A quantidade de anos
anos <- 2017:2019
### alteração para o site abaixo:
urls <- paste0("http://dados.cvm.gov.br/dados/CIA_ABERTA/DOC/DFP/DADOS/dfp_cia_aberta_", anos, ".zip")
urls
destino <- paste0("dfp_cia_aberta_", anos, ".zip")
destino
# criando função download
funcao_download <- function(u, d){
download.file(u, d)
}
# Fazer download e associar cada url a cada destino (arquivos zipados)
mapply(funcao_download, urls, destino)
# fazer a leitura dos dados
anos <- rep(2017:2019, each=length(dfp_id))
anos
arquivos_nomes <- paste0("dfp_cia_aberta_", dfp_id, "_con_", anos, ".csv")
arquivos_nomes
# Funcao processo de leitura
funcao_leitura_zip <- function(dest, arq){
unzip <- unz(dest, arq)
read.csv2(unzip, encoding = "latin1")
}
destino <- rep(destino, each=length(dfp_id))
destino
dados <- mapply(funcao_leitura_zip, destino, arquivos_nomes)
View(dados)
dados
dfp_con <- function(dfps_id, ano_inicial, ano_final){
dfps_id <- toupper(dfps_id) # transformar em Upper case
anos <- ano_inicial:ano_final
urls <- paste0("http://dados.cvm.gov.br/dados/CIA_ABERTA/DOC/DFP/DADOS/dfp_cia_aberta_", anos, ".zip")
destino <- paste0("dfp_cia_aberta_", anos, ".zip")
funcao_download <- function(u, d){
download.file(u, d)}
mapply(funcao_download, urls, destino) # Fazer download e associar cada url a cada destino
# fazer a leitura dos dados
# o vetor anos será atualizado conforme a quantidade de demonstrativos desejados
anos <- rep(ano_inicial:ano_final, each=length(dfps_id))
arquivos_nomes <- paste0("dfp_cia_aberta_", dfps_id, "_con_", anos, ".csv")
# Funcao processo de leitura
funcao_leitura_zip <- function(dest, arq){
read.csv2(unz(dest, arq), encoding = "latin1")}
destino <- rep(destino, each=length(dfps_id))
dados <<- mapply(funcao_leitura_zip, destino, arquivos_nomes)
}
# Chamar a função que já faz o processo de download
dfp_con(dfps_id = c("bpp", "bpa", "dre"), ano_inicial = 2017, ano_final = 2019)
dados
## Testando o pacote Rcpp
library(Rcpp)
library(RcppArmadillo)
## Testando o pacote Rcpp
library(Rcpp)
library(RcppArmadillo)
# importando rcpp_armadillo_soma
sourceCpp("rcpp_armadillo_soma.cpp")
rcpp_arma_soma(rnorm(1000), rnorm(1000))
sum(rcpp_arma_soma(rnorm(1000), rnorm(1000)))
mean(rcpp_arma_soma(rnorm(1000), rnorm(1000)))
cppFunction(
"NumericVector rcpp_soma(NumericVector x, NumericVector y){
int n = x.size();
NumericVector soma (n);
for(int i=0; i<n; i++){
soma[i] = x[i] + y[i];
}
return soma;
}
"
)
# criando função com r
r_soma <- function(x, y){
n <- length(x)
soma <- rep(0,n)
for (i in 1:n){
soma[i] = x[i] + y[i]
}
return(soma)
}
x <- rnorm(10)
y <- rnorm(10)
x
y
r_soma(x,y)
rcpp_soma(x,y)
rcpp_arma_soma(x,y)
## Testar Rcpp com "vetorização"
cppFunction(
"NumericVector rcpp_soma_v(NumericVector x, NumericVector y){
int n = x.size();
NumericVector soma (n);
soma = x + y;
return soma;
}
"
)
# avaliando performance
library(microbenchmark)
x <- rnorm(100000)
y <- rnorm(100000)
microbenchmark(x+y, r_soma(x,y), rcpp_soma(x,y), rcpp_soma_v(x,y), rcpp_arma_soma(x,y))
# RcppArmadillo
sourceCpp("RcppArmadillo_dot_prod.cpp")
dot_prod(x, y)
# Avaliando
microbenchmark(x %*% y, dot_prod(x,y))
load("~/.RData")
library(TSPred)
install.packages("TSPred")
library(TSPred)
library(TSPred)
library(devtools)
install_github("RebeccaSalles/TSPred")
install_github("RebeccaSalles/TSPred")
library(TDPred)
install_github("RebeccaSalles/TSPred")
install_github("RebeccaSalles/TSPred")
install_github("RebeccaSalles/TSPred")
install_github("https://github.com/RebeccaSalles/TSPred")
install.packages('TSPred')
library(TSPred)
install.packages('TSPred')
library(TSPred)
install_github("RebeccaSalles/TSPred")
install.packages('TSPred')
library(TSPred)
install.packages("TSPred")
install.packages("~/Downloads/TSPred_5.1.tar.gz", repos = NULL, type = "source")
install.packages('Rlibeemd')
setwd("/mnt/sdb1/discohd/documentos/ensemble_projeto")
load("/mnt/sdb1/discohd/documentos/ensemble_projeto/dados/SantaFe.A.cont.rda")
load("/mnt/sdb1/discohd/documentos/ensemble_projeto/dados/SantaFe.A.rda")
View(SantaFe.A)
treinamento <- load('dados/SantaFe.A.cont.rda')
source('/mnt/sdb1/discohd/documentos/ensemble_projeto/SantaFeData.R')
source('/mnt/sdb1/discohd/documentos/ensemble_projeto/SantaFeData.R')
source('/mnt/sdb1/discohd/documentos/ensemble_projeto/SantaFeData.R')
teste <- load('dados/SantaFe.A.rda')
treino
treinamento
treinamento <- load('dados/SantaFe.A.cont.rda')
View(SantaFe.A)
View(SantaFe.A.cont)
getwd()
SantaFe.A
source('/mnt/sdb1/discohd/documentos/ensemble_projeto/SantaFeData.R')
source('/mnt/sdb1/discohd/documentos/ensemble_projeto/SantaFeData.R')
rowbind(SantaFe.A, SantaFe.A.cont)
SantaFe.A
class(SantaFe.A)
SantaFe.A$V1
treinamento <- SantaFe.A$V1
teste <- SantaFe.A.cont$V1
df_santa_fe <- rbind(treinamento, teste)
df_santa_fe
# escrever dados
write.csv('dados/df_santa_fe.csv')
# escrever dados
write.csv(df_santa_fe, 'dados/df_santa_fe.csv')
library(readr)
install.packages(readr)
View(df_santa_fe)
df_santa_fe <- rbind(as.Vector(treinamento), as.Vector(teste))
df_santa_fe <- rbind(treinamento), as.Vector(teste)
treinamento <- SantaFe.A$V1
teste <- SantaFe.A.cont$V1
df_santa_fe <- rbind(treinamento), as.Vector(teste)
df_santa_fe <- rbind(treinamento, teste)
df_santa_fe
df_santa_fe <- rbind(treinamento[1:nrow(treinamento)], teste[1:nrow(teste)]
df_santa_fe <- rbind(treinamento[1:nrow(treinamento)], teste[1:nrow(teste)])
df_santa_fe <- rbind(treinamento[1:nrow(treinamento)], teste[1:nrow(teste)])
teste
df_santa_fe <- rbind(treinamento[1:length(treinamento)], teste[length(teste)])
df_santa_fe
treinamento
c(treinamento, teste)
df_santa_fe <- c(treinamento, teste)
# escrever dados
write.csv(df_santa_fe, 'dados/df_santa_fe.csv')
plot(df_santa_fe)
plot(df_santa_fe, type = 'l')
